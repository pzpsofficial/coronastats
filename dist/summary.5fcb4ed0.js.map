{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","scripts/summary.js"],"names":["sectionCards","document","querySelector","input","select","startOrder","getSummary","fetch","res","json","data","Countries","getCountry","country","toLowerCase","replace","split","flag","console","log","renderData","then","arr","countriesFromApi","forEach","element","img","push","CountryCode","Promise","all","flags","index","card","Country","NewConfirmed","TotalConfirmed","Slug","NewDeaths","NewRecovered","TotalDeaths","TotalRecovered","insertAdjacentHTML","querySelectorAll","renderSortedData","innerHTML","insertAdjacentElement","timer","addEventListener","e","preventDefault","cards","Array","from","children","textContent","includes","value","style","display","sort","a","b","dataset","slice","new","total","el","target","classList","contains","closest","slug","sessionStorage","setItem"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"summary.5fcb4ed0.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import 'regenerator-runtime';\r\nimport { async } from 'regenerator-runtime';\r\n\r\nconst sectionCards = document.querySelector('.section-cards');\r\nconst input = document.querySelector('.search');\r\nconst select = document.querySelector('.select');\r\nlet startOrder = '';\r\n\r\n// fetch('https://api.covid19api.com/summary')\r\n//   .then((res) => res)\r\n//   .then((data) => console.log(data.json()));\r\n\r\nconst getSummary = async () => {\r\n  const res = await fetch('https://api.covid19api.com/summary');\r\n  const data = await res.json();\r\n  return data.Countries;\r\n};\r\n\r\nconst getCountry = async (country) => {\r\n  try {\r\n    country = country.toLowerCase().replace(',', '').split(' ');\r\n    // console.log(country);\r\n    const res = await fetch(\r\n      `https://restcountries.eu/rest/v2/alpha/${country}`\r\n    );\r\n    const data = await res.json();\r\n    return data.flag;\r\n  } catch (err) {\r\n    console.log('Something went wrong');\r\n  }\r\n};\r\n\r\n// getSummary();\r\n\r\nconst renderData = async (data) => {\r\n  data.then(async (arr) => {\r\n    const countriesFromApi = [];\r\n    console.log(arr);\r\n\r\n    arr.forEach((element) => {\r\n      const img = countriesFromApi.push(getCountry(element.CountryCode));\r\n    });\r\n\r\n    const flags = await Promise.all([...countriesFromApi]);\r\n\r\n    console.log(flags);\r\n\r\n    arr.forEach((element, index) => {\r\n      const card = `\r\n        <div class=\"card\" data-country=\"${element.Country}\" data-new=\"${element.NewConfirmed}\" data-total=\"${element.TotalConfirmed}\" data-slug=\"${element.Slug}\">\r\n            <img src=\"${flags[index]}\" alt=\"Flag\" />\r\n            <h3>${element.Country}</h3>\r\n            <div class=\"info\">\r\n              <div class=\"new\">\r\n                <span class=\"bold\">New cases</span>\r\n                <div class=\"confirmed\"><i class=\"fas fa-virus\"></i> ${element.NewConfirmed}</div>\r\n                <div class=\"deaths\">\r\n                  <i class=\"fas fa-skull-crossbones\"></i> ${element.NewDeaths}\r\n                </div>\r\n                <div class=\"recovered\">\r\n                  <i class=\"fas fa-virus-slash\"></i> ${element.NewRecovered}\r\n                </div>\r\n              </div>\r\n              <div class=\"break\"></div>\r\n              <div class=\"total\">\r\n                <span class=\"bold\">All cases</span>\r\n                <div class=\"confirmed\"><i class=\"fas fa-virus\"></i> ${element.TotalConfirmed}</div>\r\n                <div class=\"deaths\">\r\n                  <i class=\"fas fa-skull-crossbones\"></i> ${element.TotalDeaths}\r\n                </div>\r\n                <div class=\"recovered\">\r\n                  <i class=\"fas fa-virus-slash\"></i> ${element.TotalRecovered}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <a href=\"details.html\" class=\"btn\">Details</a>\r\n          </div>\r\n      `;\r\n      sectionCards.insertAdjacentHTML('beforeend', card);\r\n      startOrder = document.querySelectorAll('.card');\r\n    });\r\n  });\r\n};\r\n\r\nconst renderSortedData = (data) => {\r\n  sectionCards.innerHTML = '';\r\n  data.forEach((card) => {\r\n    sectionCards.insertAdjacentElement('beforeend', card);\r\n  });\r\n};\r\n\r\n// getSummary();\r\n\r\nrenderData(getSummary());\r\n\r\nlet timer;\r\n\r\ninput.addEventListener('submit', (e) => {\r\n  e.preventDefault();\r\n});\r\n\r\ninput.addEventListener('input', (e) => {\r\n  e.preventDefault();\r\n\r\n  const cards = Array.from(document.querySelectorAll('.card'));\r\n\r\n  cards.forEach((card) => {\r\n    if (\r\n      !card.children[1].textContent\r\n        .toLowerCase()\r\n        .includes(input.value.toLowerCase())\r\n    ) {\r\n      card.style.display = 'none';\r\n    } else {\r\n      card.style.display = 'block';\r\n    }\r\n  });\r\n});\r\n\r\nselect.addEventListener('change', (e) => {\r\n  e.preventDefault();\r\n\r\n  const cards = Array.from(document.querySelectorAll('.card'));\r\n\r\n  if (select.value === 'alfabetycznie_rosnaco') {\r\n    cards.sort((a, b) => {\r\n      if (a.style.display === 'none' && b.style.display === 'none') return;\r\n      if (a.dataset.country.slice(0, 1) < b.dataset.country.slice(0, 1)) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    });\r\n    renderSortedData(cards);\r\n  }\r\n\r\n  if (select.value === 'alfabetycznie_malejaco') {\r\n    cards.sort((a, b) => {\r\n      if (a.dataset.country.slice(0, 1) > b.dataset.country.slice(0, 1)) {\r\n        return -1;\r\n      } else {\r\n        return 1;\r\n      }\r\n    });\r\n    renderSortedData(cards);\r\n  }\r\n\r\n  if (select.value === 'most_new') {\r\n    console.log(cards);\r\n    cards.sort((a, b) => {\r\n      if (+a.dataset.new > +b.dataset.new) {\r\n        return -1;\r\n      } else if (+a.dataset.new < +b.dataset.new) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    renderSortedData(cards);\r\n  }\r\n\r\n  if (select.value === 'least_new') {\r\n    console.log(cards);\r\n    cards.sort((a, b) => {\r\n      if (+a.dataset.new < +b.dataset.new) {\r\n        return -1;\r\n      } else if (+a.dataset.new > +b.dataset.new) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    renderSortedData(cards);\r\n  }\r\n\r\n  if (select.value === 'most_total') {\r\n    console.log(cards);\r\n    cards.sort((a, b) => {\r\n      if (+a.dataset.total > +b.dataset.total) {\r\n        return -1;\r\n      } else if (+a.dataset.total < +b.dataset.total) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    renderSortedData(cards);\r\n  }\r\n\r\n  if (select.value === 'least_total') {\r\n    console.log(cards);\r\n    cards.sort((a, b) => {\r\n      if (+a.dataset.total < +b.dataset.total) {\r\n        return -1;\r\n      } else if (+a.dataset.total > +b.dataset.total) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    renderSortedData(cards);\r\n  }\r\n\r\n  if (select.value === 'none') {\r\n    renderSortedData(startOrder);\r\n  }\r\n});\r\n\r\nsectionCards.addEventListener('click', (e) => {\r\n  const el = e.target;\r\n  if (!el.classList.contains('btn')) return;\r\n  const country = el.closest('.card').dataset.slug;\r\n  sessionStorage.setItem('country', country);\r\n});\r\n"]}